import os
import threading
import subprocess
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import customtkinter as ctk
from pymem import Pymem
from pymem.process import inject_dll
import requests
import json

file_patterns = ["Tirify.Common.dll"]

observer = Observer()
info_url = "https://raw.githubusercontent.com/spacecollapse/alkad-eac-bypass/main/ad"
info_file_path = os.path.join(os.path.expanduser("~"), "Documents", "info.txt")
path_file = os.path.join(os.path.expanduser("~"), "Documents", "rust_path.txt")
info_file = os.path.join(os.path.expanduser("~"), "Documents", "lang.txt") 
current_language = "ru" 
bypass_enabled = False  

def check_and_update_link():
    try:
        response = requests.get(info_url)
        response.raise_for_status()  
        
        current_info = response.json() 
        current_link = current_info.get("link")

        if os.path.exists(info_file_path):
            if current_link == "https://github.com/spacecollapse/alkad-eac-bypass":
                print("info.txt существуе")
                return
        with open(info_file_path, "w") as file:
            json.dump(current_info, file)
        print("опен:", current_link)
        subprocess.run(['start', current_link], shell=True)
    
    except Exception as e:
        print(f"{e}")



def animate_title(root, title_text):
    def update_title():
        current_text = ""
        for char in title_text:
            current_text += char
            root.title(current_text)
            threading.Event().wait(0.1)

    threading.Thread(target=update_title, daemon=True).start()

class FileDeleteHandler(FileSystemEventHandler):
    def __init__(self, file_patterns):
        self.file_patterns = file_patterns

    def on_created(self, event):
        for pattern in self.file_patterns:
            if event.src_path.endswith(pattern):
                try:
                    os.remove(event.src_path)
                    print(f"suc del: {event.src_path}")
                except Exception as e:
                    print(f"error del {event.src_path}: {e}")

def start_monitoring(path, start_button):
    global bypass_enabled
    if not path:
        print("Не указан путь к папке")
        return

    monitor_path = os.path.join(path, "RustClient_Data", "Plugins", "x86_64")
    if not os.path.exists(monitor_path):
        print(f"Путь не существует: {monitor_path}")
        return

    for pattern in file_patterns:
        initial_file_path = os.path.join(monitor_path, pattern)
        if os.path.exists(initial_file_path):
            try:
                os.remove(initial_file_path)
                print(f"Удален файл: ")
            except Exception as e:
                print(f"Ошибка{e}")

    event_handler = FileDeleteHandler(file_patterns)
    observer.schedule(event_handler, monitor_path, recursive=False)
    threading.Thread(target=run_observer, daemon=True).start()

    bypass_enabled = True
    update_interface() 

def run_observer():
    observer.start()

def save_path(path):
    with open(path_file, "w") as file:
        file.write(path)

def load_path():
    if os.path.exists(path_file):
        with open(path_file, "r") as file:
            return file.read().strip()
    return ""

def open_rust():
    rust_folder = ""
    if os.path.exists(path_file):
        with open(path_file, 'r') as f:
            rust_folder = f.readline().strip()
    else:
        app = ctk.CTk()
        app.attributes('-topmost', True)
        rust_folder = ctk.filedialog.askdirectory(title="Выберите папку с растом /// Select your Rust Folder")
        app.destroy()
        if not rust_folder:
            return ""
        save_path(rust_folder)

    rust_path2_file = os.path.join(os.path.expanduser("~"), "Documents", "rust_path2.txt")
    monitor_path = os.path.join(rust_folder, "RustClient_Data", "Plugins", "x86_64")
    dll_file_path = os.path.join(monitor_path, "steam_api64.dll")
    tmanifest_path = os.path.join(rust_folder, ".tmanifest")
    if os.path.exists(tmanifest_path):
        try:
            os.remove(tmanifest_path)
            print("Удален файл .tmanifest")
        except Exception as e:
            print(f"Ошибка при удалении .tmanifest: {e}")

    if not os.path.exists(rust_path2_file):
        if os.path.exists(dll_file_path):
            try:
                os.remove(dll_file_path)
                print("Удален файл steam_api64.dll")
            except Exception as e:
                print(f"Ошибка при удалении steam_api64.dll: {e}")

        
        url = "https://github.com/spacecollapse/bat/releases/download/cleaner/steam_api64.dll"
        try:
            response = requests.get(url)
            response.raise_for_status()  

            with open(dll_file_path, 'wb') as dll_file:
                dll_file.write(response.content)
            print("Загружен новый файл steam_api64.dll")
            
            
            with open(rust_path2_file, 'w') as f:
                f.write('') 
            print("Файл rust_path2.txt создан")
            
        except Exception as e:
            print(f"Ошибка загрузке steam_api64.dll: {e}")

    
    bat_content = (
        '@echo off\n'
        f'cd /d "{rust_folder}"\n'
        'start "" "Rust.exe"\n'
        'timeout /t 5 /nobreak >nul\n'
        'start "" "RustClient.exe"\n'
    )
    with open(os.path.join(os.path.expanduser("~/Documents"), 'start_rust.bat'), 'w') as bat_file:
        bat_file.write(bat_content)
    subprocess.Popen([os.path.join(os.path.expanduser("~/Documents"), 'start_rust.bat')], shell=True)
    return rust_folder


class FileDeleteHandler(FileSystemEventHandler):
    def __init__(self, file_patterns):
        self.file_patterns = file_patterns

    def on_created(self, event):
        for pattern in self.file_patterns:
            if event.src_path.endswith(pattern):
                try:
                    os.remove(event.src_path)
                    print(f"suc del: {event.src_path}")
                except Exception as e:
                    print(f"error del {event.src_path}: {e}")


def start_monitoring(path, start_button):
    global bypass_enabled
    if not path:
        print("Не указан путь к папке Rust")
        return

    monitor_path = os.path.join(path, "RustClient_Data", "Plugins", "x86_64")
    if not os.path.exists(monitor_path):
        print(f"Путь не существует")
        return

    for pattern in file_patterns:
        initial_file_path = os.path.join(monitor_path, pattern)
        if os.path.exists(initial_file_path):
            try:
                os.remove(initial_file_path)
                print(f"Удален{pattern}")
            except Exception as e:
                print(f"Ошибка {pattern} {e}")

    event_handler = FileDeleteHandler(file_patterns)
    observer.schedule(event_handler, monitor_path, recursive=False)
    observer.schedule(event_handler, path, recursive=False)
    threading.Thread(target=run_observer, daemon=True).start()

    bypass_enabled = True
    update_interface()

def close_rust():
    processes_to_close = ["EasyAntiCheat.exe", "Rust.exe", "RustClient.exe"]
    for process_name in processes_to_close:
        try:
            subprocess.run(['taskkill', '/F', '/IM', process_name], check=True)
            print(f"Процесс {process_name} завершен")
        except subprocess.CalledProcessError:
            print(f"Не удалось завершить процесс {process_name}")

def open_github():
    subprocess.run(['start', 'https://github.com/spacecollapse'], shell=True)

def open_discord():
    subprocess.run(['start', 'https://discord.gg/tYpSxkRzbD'], shell=True)

def open_help():
    subprocess.run(['start', 'https://github.com/spacecollapse/requirements'], shell=True)

def inject_other():
    app = ctk.CTk()
    app.attributes('-topmost', True)
    dll_path = ctk.filedialog.askopenfilename(title="Выберите DLL файл для инжекта /// Select DLL file to inject", filetypes=[("DLL Files", "*.dll")])
    app.destroy()
    if not dll_path:
        print("Файл DLL не выбран.")
        return

    process_name = "RustClient.exe"
    try:
        open_process = Pymem(process_name)
        inject_dll(open_process.process_handle, dll_path.encode("UTF-8"))
    except Exception as e:
        print(f"{e}")

def delete_files():
    documents_path = os.path.expanduser("~/Documents")
    files_to_delete = ["rust_path.txt", "start_rust.bat", "rust_path2.txt"]
    for filename in files_to_delete:
        file_path = os.path.join(documents_path, filename)
        try:
            if os.path.exists(file_path):
                os.remove(file_path)
            else:
                print(f"Файл не найден")
        except Exception as e:
            print(f"Ошибка при удалении")

def save_language():
    with open(info_file, "w") as file:
        file.write(current_language)

def load_language():
    global current_language
    if os.path.exists(info_file):
        with open(info_file, "r") as file:
            current_language = file.read().strip()
def switch_language():
    global current_language
    current_language = "en" if current_language == "ru" else "ru"
    save_language() 
    update_interface()

def update_interface():
    if current_language == "ru":
        start_button.configure(text="Обход Включён\n Не закрывайте программу" if bypass_enabled else "Включить Обход",
                               fg_color="green" if bypass_enabled else "#2c00f7") 
        inject_button.configure(text="Выбрать Dll для инжекта")
        open_rust_button.configure(text="Открыть Rust")
        close_rust_button.configure(text="Закрыть Rust")
        github_button.configure(text="Сбросить настройки")
        discord_button.configure(text="Компоненты для читов")
        button3.configure(text="Github")
        button4.configure(text="Discord")
        language_button.configure(text="English Interface", fg_color="#c85386")
    else:
        start_button.configure(text="Bypass Enabled\nDo Not Close Program" if bypass_enabled else "Enable Bypass",
                               fg_color="green" if bypass_enabled else "#2c00f7")  
        inject_button.configure(text="Select DLL for Injection")
        open_rust_button.configure(text="Open Rust")
        close_rust_button.configure(text="Close Rust")
        github_button.configure(text="Reset Settings")
        discord_button.configure(text="Cheat Components")
        button3.configure(text="Github")
        button4.configure(text="Discord")
        language_button.configure(text="Сменить Язык", fg_color="#c85386")



def main():
    load_language() 
    global start_button, inject_button, open_rust_button, close_rust_button, github_button, discord_button, button3, button4, language_button, label

    root = ctk.CTk()
    root.geometry("375x380")
    root.resizable(False, False)

    title_text = "</> GoodByeEAC </>"
    animate_title(root, title_text)

    main_frame = ctk.CTkFrame(root)
    main_frame.pack(pady=20, padx=10)
    start_button = ctk.CTkButton(main_frame, text="Включить Обход", fg_color="#2c00f7", command=lambda: start_monitoring(load_path() or open_rust(), start_button))
    start_button.grid(row=0, column=0, columnspan=2, pady=10)
    inject_button = ctk.CTkButton(main_frame, text="Выбрать Dll для инжекта", fg_color="#d500ff", command=inject_other)
    inject_button.grid(row=1, column=0, columnspan=2, pady=10)
    open_rust_button = ctk.CTkButton(main_frame, text="Открыть Rust", fg_color="#256D7B", command=open_rust)
    open_rust_button.grid(row=2, column=0, padx=10, pady=5, sticky="ew")
    close_rust_button = ctk.CTkButton(main_frame, text="Закрыть Rust",fg_color="#256D7B", command=close_rust)
    close_rust_button.grid(row=2, column=1, padx=10, pady=5, sticky="ew")
    link_frame = ctk.CTkFrame(root)
    link_frame.pack(pady=5, padx=10)
    first_row_frame = ctk.CTkFrame(link_frame)
    first_row_frame.pack(pady=10, padx=10)
    github_button = ctk.CTkButton(first_row_frame, text="Сбросить настройки", fg_color="#572020", command=delete_files)
    github_button.pack(side="left", padx=10)
    discord_button = ctk.CTkButton(first_row_frame, text="Компоненты для читов", fg_color="#572020", command=open_help)
    discord_button.pack(side="left", padx=10)
    second_row_frame = ctk.CTkFrame(link_frame)
    second_row_frame.pack(pady=10, padx=10)
    button3 = ctk.CTkButton(second_row_frame, text="Github", fg_color="#4B0082", command=open_github)
    button3.pack(side="left", padx=10)
    button4 = ctk.CTkButton(second_row_frame, text="Discord", fg_color="#4B0082", command=open_discord)
    button4.pack(side="left", padx=10)
    language_button = ctk.CTkButton(root, text="English Interface", fg_color="#c85386", command=switch_language)
    language_button.pack(pady=5)
    label = ctk.CTkLabel(root, text="made by usehvh 06.09.24", font=("Arial", 30, "bold"))
    label.pack(padx=10, pady=10)

    if load_path():
        start_monitoring(load_path(), start_button)
    update_interface()
    root.mainloop()

if __name__ == "__main__":
    check_and_update_link() 
    ctk.set_appearance_mode("dark")
    ctk.set_default_color_theme("dark-blue")
    main()
